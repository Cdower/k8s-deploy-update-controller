name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '40 12 * * 5'
  push:
    branches: [ main ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY:
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load envinronment variables from file
        id: dotenv
        uses: falti/dotenv-action@v0.2.8
        with:
          mask-variables: false
          log-variables: true

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry Dockerhub #${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@dd4fa0671be5250ee6f50aedf4cb05514abda2c7
        with:
          # registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@f2a13332ac1ce8c0a71aeac48a150dbb1838ab67
        env:
          VERSION: v${{ steps.dotenv.outputs.major}}.${{ steps.dotenv.outputs.minor}}.${{ steps.dotenv.outputs.patch}}
          IMAGEREPO: ${{ steps.dotenv.outputs.repo}}/${{ steps.dotenv.outputs.imagename}}
        with:
          images: ${{ env.IMAGEREPO }}
          labels: |
            maintainer=cdoewr
            org.opencontainers.image.title=Kubernetes Deployment Updater
            org.opencontainers.image.description=A jerry rigged quote unquote controller to watch deployments for new releases and update them.
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=sha

      # Setup QEMU for multi-arch build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Optimize with layer Caching
      - name: Cache Docker layers
        uses: actions/cache@v3.0.1
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Reference bake action
      #- name: Build
      #  uses: docker/bake-action@v1
      #  with:
      #    files: |
      #      ./docker-bake.hcl
      #      ${{ steps.meta.outputs.bake-file }}
      #    targets: build
